#!/bin/sh /etc/rc.common
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

USE_PROCD=1

START=99

. /lib/functions/gl_util.sh
model=$(get_model)

start_service() {
        [ "$(uci -q get adguardhome.config.enabled)" = "1" ] || exit 0

        # Hello World! Edit the values here to point where the AGH directory is located.
        MOUNT_NAME="MOUNT_NAME"
        AGH_DIRECTORY="@A1/app/AdGuardHome"
        
        # Fix: Update AGH by just placing the new file on the directory. Name the new file: AdGuardHome.new
        # TO-DO (hopefully): Use a download link instead to extract the .tar.gz file then use "tar -xvzf" to extract.
        # Ideally, directly downloading the binary to avoid the extracting work is better tbh.
        # ALSO: AdGuardHome's native update is disabled (see line 93). There must be a reason why it is there by default? Either way, AGH on MT1300 isn't natively installed nor supported anyways.
        # An update script that grabs the latest file online deserves a separate script to avoid complicating this transplanted code even more.

        OLD_AGH_FILE="/mnt/$MOUNT_NAME/$AGH_DIRECTORY/AdGuardHome"
        NEW_AGH_FILE="${OLD_AGH_FILE}.new"

        # Check if the new binary exists
        if [ -f "$NEW_AGH_FILE" ]; then
                logger -t AGH-INIT.D "Found $NEW_AGH_FILE. Updating AdGuardHome binary..."

                # Rename the existing binary to add .old
                mv "$OLD_AGH_FILE" "${OLD_AGH_FILE}.old"
                logger -t AGH-INIT.D "Renamed existing binary to ${OLD_AGH_FILE}.old"

                # Rename the new binary to the main binary
                mv "$NEW_AGH_FILE" "$OLD_AGH_FILE"
                logger -t AGH-INIT.D "Renamed $NEW_AGH_FILE to $OLD_AGH_FILE"

                # Delete the old binary
                rm -f "${OLD_AGH_FILE}.old"
                logger -t AGH-INIT.D "Deleted old binary: ${OLD_AGH_FILE}.old"

                # Add execute permissions
                chmod +x $OLD_AGH_FILE
                logger -t AGH-INIT.D "Update of AGH completed successfully."
        else
                logger -t AGH-INIT.D "No $NEW_AGH_FILE found. Starting AGH."
        fi

        # Fix: Use the /tmp directory to store filters and data, this will clear every restart tho!
        # This is for performance reasons and to not wear out the flash storage.
        # Model Comparison was originally a b1300 and "dose not support mmap,need link the data to tmp fs"
        [ "$model" = "mt1300" ] && {
                rm -rf /mnt/$MOUNT_NAME/$AGH_DIRECTORY/data 2>/dev/null
                mkdir -p /tmp/AGH_data
                ln -s /tmp/AGH_data /mnt/$MOUNT_NAME/$AGH_DIRECTORY/data
        }

        # Fix: Originally, this was a: [ "$(uci -q get adguardhome.config.dns_enabled)" = "1" ] comparison
        # However, the UI seems modern because it does not have the "AdGuard Home Handle Client Request" setting anymore.
        # Defaulted to enable to properly show clients in the interface and database.
        dns_enabled="1" 
        [ "$dns_enabled" -eq 1 ] && {
                uci set firewall.adguard_home='redirect'
                uci set firewall.adguard_home.name="Adguard Home"
                uci set firewall.adguard_home.src='lan'
                uci set firewall.adguard_home.src_dport='53'
                uci set firewall.adguard_home.dest='lan'
                uci set firewall.adguard_home.dest_port='3053'
                uci set firewall.adguard_home.proto='tcpudp'

                has_radio="$(get_radio)"
                [ -n "$has_radio" ] && {
                        uci set firewall.adguard_home_guest='redirect'
                        uci set firewall.adguard_home_guest.name="Adguard Home guest"
                        uci set firewall.adguard_home_guest.src='guest'
                        uci set firewall.adguard_home_guest.src_dport='53'
                        uci set firewall.adguard_home_guest.dest='guest'
                        uci set firewall.adguard_home_guest.dest_port='3053'
                        uci set firewall.adguard_home_guest.proto='tcpudp'
                }
        }

        uci commit 'firewall'
        /etc/init.d/firewall reload

        procd_open_instance
        procd_set_param respawn
        procd_set_param stderr 1
        procd_set_param command /mnt/$MOUNT_NAME/$AGH_DIRECTORY/AdGuardHome --glinet --no-check-update -c /mnt/$MOUNT_NAME/$AGH_DIRECTORY/config.yaml -w /mnt/$MOUNT_NAME/$AGH_DIRECTORY -l syslog
        procd_close_instance
        [ -e /etc/edgerouter.fw ] && /etc/edgerouter.fw loaddns
}

stop_service(){
        uci delete firewall.adguard_home

        has_radio="$(get_radio)"
        [ -n "$has_radio" ] && {
                uci delete firewall.adguard_home_guest
        }

        uci commit 'firewall'
        /etc/init.d/firewall reload
        [ -e /etc/edgerouter.fw ] && /etc/edgerouter.fw loaddns
}
